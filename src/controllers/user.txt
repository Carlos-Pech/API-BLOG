// import User from "../models/User.js";
// import Plan from "../models/plans.js";
// import mongoose from "mongoose";
// import { hasSubscriptionEnded } from "../middleware/compare_date.js";

// export const getInfoUser = async (req, res) => {
//     try {
//         const { id_user } = req.params;
//         const findUser = await User.findById(id_user, {
//             password: 0,
//             id_role: 0,
//         });

//         if (!findUser)
//             return res.status(404).json({ message: "User not found" });

//         let plan = "without subscription";
//         let duration = "";
//         let expired = "";
//         let title = "";
//         let price = 0;
//         let description = "";

//         if (findUser.subscription_start_date !== null) {
//             const findIdPlan = await Plan.findById(findUser.id_plan);

//             const { subscriptionEndDate, hasEnded } = hasSubscriptionEnded(
//                 findUser.subscription_start_date,
//                 findIdPlan.duration
//             );

//             duration = findIdPlan.duration;
//             title = findIdPlan.title;
//             price = findIdPlan.price;
//             description = findIdPlan.description;
//             expired = subscriptionEndDate;

//             // Utiliza hasEnded para determinar si la suscripción ha finalizado o no
//             plan = hasEnded ? "expired subscription" : "active subscription";
//         }

//         // Eliminar los campos no deseados del objeto usuario
//         const userObject = findUser.toObject();
//         delete userObject.id_plan;
//         delete userObject.createdAt;
//         delete userObject.updatedAt;

//         const response = {
//             data: {
//                 ...userObject,

//                 plan: duration
//                     ? {
//                           status_plan: plan,
//                           title: title,
//                           duration: duration,
//                           description: description,
//                           subscription_start_date:
//                               userObject.subscription_start_date,
//                           expired_date: expired,
//                           price: price,
//                       }
//                     : null,
//             },
//         };

//         return res.status(200).json(response);
//     } catch (error) {
         
//         if (error instanceof mongoose.Error.CastError) {
//             return res.status(400).send({ message: "Invalid Id" });
//         }
//         return res.status(500).json({ message: "Something went wrong" });
//     }
// };

// export const getOneUser = async (req, res) => {
//     try {
//         const userId = req.params.userId; // Suponiendo que el ID del usuario se pasa como parte de la URL

//         // Buscar el usuario por ID y poblar la información del rol
//         const user = await User.findById(userId).populate("id_role", "name");

//         // Verificar si se encontró el usuario
//         if (!user) {
//             return res.status(404).json({ message: "User not found" });
//         }

//         const userView = {
//             id: user._id,
//             firstname: user.firstname,
//             lastname: user.lastname,
//             phone_number: user.phone_number,
//             email: user.email,
//             id_plan: user.id_plan,
//         };

//         return res.status(200).json({ data: userView });
//     } catch (error) {
//         if (error instanceof mongoose.Error.CastError) {
//             return res.status(400).send({ message: "Invalid Id" });
//         }
//         return res.status(500).json({ message: "Something went wrong" });
//     }
// };

// export const updateUser = async (req, res) => {
//     try {
//         const { id } = req.params;

//         const updateUser = await User.findByIdAndUpdate(id, req.body, {
//             new: true,
//         });
//         if (!updateUser)
//             return res.status(404).send({ message: "Id not found" });

//         const response = {
//             data: updateUser,
//         };
//         res.status(200).json(response);
//     } catch (error) {
//         if (error instanceof mongoose.Error.CastError)
//             return res.status(400).send({ message: "Invalid Id" });
//         return res.status(500).send("Something went wrong");
//     }
// };

// export const getAllUsers = async (req, res) => {
//     try {
//         const users = await User.find().populate("id_role", "name");

//         // Filtrar usuarios que NO tengan el rol 'SuperAdmin'
//         const usersFiltered = users.filter((user) => {
//             return user.id_role.name == "user";
//         });

//         const usersView = usersFiltered.map((user) => ({
//             id: user._id,
//             firstname: user.firstname,
//             lastname: user.lastname,
//             phone_number: user.phone_number,
//             email: user.email,
//             // role: user.id_role ? user.id_role.name : "No Role Assigned",
//         }));

//         return res.status(200).json({ data: usersView });
//     } catch (error) {
//          (error);
//         return res.status(500).json({ message: "Something went wrong" });
//     }
// };
